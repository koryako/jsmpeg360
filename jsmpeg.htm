
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - equirectangular panorama demo</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}

		</style>
	</head>
	<body>
        <canvas id="videoCanvas" style="display:none;"></canvas>
        <audio id="audio">
            <source src="hr.mp3" type="audio/mpeg">
        </audio>
		<div id="container"></div>

        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
         <script type="text/javascript" src="jsmpg.js"></script>
        
		<script src="three.min.js"></script>
        <script src="DeviceOrientationControls.js"></script>
        <script src="OrbitControls.js"></script>


		<script>

		    var camera, scene, controls, renderer, mesh, geometry, texture;
		    var isUserInteracting = false,
			onMouseDownMouseX = 0, onMouseDownMouseY = 0,
			lon = 0, onMouseDownLon = 0,
			lat = 0, onMouseDownLat = 0,
			phi = 0, theta = 0;
		    init();
		    animate();
		    function init() {

		        var container;

		        container = document.getElementById('container');

                //video to canvas
		        var videoCanvas = document.getElementById('videoCanvas');
		        var status = 0;
		        var mpegfinished = function (player) {
		            switch (status) { 
                        case 0:
                            player = new jsmpeg('1920.mpg', { canvas: videoCanvas, autoplay: true, loop: false, seekable: true, onfinished: mpegfinished });
                            player.play();
                            break;
                        case 1:
                            player = new jsmpeg('fox.mpg', { canvas: videoCanvas, autoplay: true, loop: false, seekable: true, onfinished: mpegfinished });
                            player.play();
                            break;
                        case 2:
                            player = new jsmpeg('hr1024.mpg', { canvas: videoCanvas, autoplay: true, loop: false, seekable: true, onfinished: mpegfinished });
                            player.play();
                            break;
                    }
		            status++;
		        };
		        var player = new jsmpeg('hr.mpg', { canvas: videoCanvas, autoplay: true, loop: false, seekable: true, onfinished: mpegfinished });
                player.play();
		     
		        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight);
		        camera.target = new THREE.Vector3(0, 0, 0);
		        scene = new THREE.Scene();

		        geometry = new THREE.SphereGeometry(500, 60, 40);
		        geometry.applyMatrix(new THREE.Matrix4().makeScale(-1, 1, 1));
                //canvas to texture
		        texture = new THREE.Texture(videoCanvas)
		        var material = new THREE.MeshBasicMaterial({
		            map: texture
		        });

		        mesh = new THREE.Mesh(geometry, material);
		        scene.add(mesh);

		        renderer = new THREE.WebGLRenderer();
		        renderer.setPixelRatio(window.devicePixelRatio);
		        renderer.setSize(window.innerWidth, window.innerHeight);
		        container.appendChild(renderer.domElement);
		        //
		        window.addEventListener('resize', onWindowResize, false);
		    }

		    function onWindowResize() {
		        camera.aspect = window.innerWidth / window.innerHeight;
		        camera.updateProjectionMatrix();
		        renderer.setSize(window.innerWidth, window.innerHeight);
		    }


		    function animate() {
		        requestAnimationFrame(animate);
		        update();
		    }

		    function update() {
		        texture.needsUpdate = true;
		        renderer.render(scene, camera);
		        window.addEventListener('deviceorientation', setOrientationControls, true);
		    }
		    // Our preferred controls via DeviceOrientation
		    function setOrientationControls(e) {
		        if (!e.alpha) {
		            return;
		        }
		        controls = new THREE.DeviceOrientationControls(camera, true);
		        controls.connect();
		        controls.update();
		        window.removeEventListener('deviceorientation', setOrientationControls, true);
		    }
		   
		</script>
	</body>
</html>
